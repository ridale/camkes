/*
 * Copyright 2019, Data61, CSIRO (ABN 41 687 119 230)
 *
 * SPDX-License-Identifier: BSD-2-Clause
 */

import <std_connector.camkes>;
import <global-connectors.camkes>;
import <TimeServer/TimeServer.camkes>;

#include <tuning_params.h>
#include <camkes-picotcp-ethernet-async.h>
#include <camkes-picotcp-socket-sync.h>
#include <camkes-picotcp-base.h>
#include <camkes-fdt-bind-driver.h>
#include <camkes-single-threaded.h>
#include <camkes-dynamic-untyped-allocators.h>
#include <camkes-x86-iospace-dma.h>
#include <camkes-SerialServer-camkes-putchar-client.h>
#include <camkes-BenchUtiliz.h>

component PicoServerDF {
    single_threaded_component()
    picotcp_ethernet_async_client_interfaces(eth0)
    picotcp_socket_sync_server_interfaces(pico)
    picotcp_base_interfaces(pico_base)
    SerialServer_putchar_printf_client(putchar)

    composition {
        picotcp_socket_sync_server_connections(pico)
    }
    configuration {
        picotcp_socket_sync_server_configurations(pico)
    }
}

/* Example hardware components that contain minimal necessary spec for different ethdrivers */
component HWEthDriver82574DF {
    hardware;
    emits IRQ irq;
    dataport Buf(0x20000) mmio;
};



component Ethdriver82574DF {
    single_threaded_component()
    dynamic_untyped_allocators_interfaces(init_dynamic)
    x86_iospace_dma_interfaces(init_iospaces, "0x12:0x0:0x19:0")
    picotcp_ethernet_async_server_interfaces(eth0)
    /*
     * The promiscuous mode is set according to whatever configuration you want, 1 by default.
     */
     attribute int promiscuous_mode = 1;

    consumes IRQ irq;
    dataport Buf(0x20000) EthDriver;
    SerialServer_putchar_printf_client(putchar)


    /* MMIO and IRQ default values */
    attribute int mmio_paddr = 0xf7f00000;
    attribute int mmio_size = 0x20000;
    attribute string irq_irq_type = "pci";
    attribute int irq_irq_ioapic = 0;
    attribute int irq_irq_ioapic_pin = 20;
    attribute int irq_irq_vector = 20;

    attribute int simple = 1;
    attribute int cnode_size_bits = 14;
    attribute int simple_untyped20_pool = 2;
    attribute int heap_size = 0x40000;
    attribute int dma_pool = 0x4000;
    attribute int dma_pool_cached = 1;


    composition {
        component HWEthDriver82574DF hwethdriver;
        connection seL4HardwareMMIO ethdrivermmio(from EthDriver, to hwethdriver.mmio);
        connection seL4GlobalAsynchHardwareInterrupt hwethirq(from hwethdriver.irq, to irq);
        dynamic_untyped_allocators_connections(init_dynamic)
        x86_iospace_dma_connections(init_iospaces)


    }
    configuration {
        hwethdriver.mmio_paddr <- mmio_paddr;
        hwethdriver.mmio_size <- mmio_size;
        hwethdriver.irq_irq_type <- irq_irq_type;
        hwethdriver.irq_irq_ioapic <- irq_irq_ioapic;
        hwethdriver.irq_irq_ioapic_pin <- irq_irq_ioapic_pin;
        hwethdriver.irq_irq_vector <- irq_irq_vector;
        dynamic_untyped_allocators_configuration(init_dynamic)
        x86_iospace_dma_configuration(init_iospaces)
   }
}


component Echo {
    single_threaded_component()
    picotcp_socket_sync_client_interfaces(echo)
    BenchUtiliz_control_interfaces(idle)
    SerialServer_putchar_printf_client(putchar)
}

assembly {
    composition {
        /* Echo component */
        component Echo echo;

        /* PicoServer component */
        component PicoServerDF picoserver;

        /* Ethdriver component */
        component Ethdriver82574DF ethdriver;

        /* Timer component */
        component TimeServer time_server;

        /* Serial server component */
        component SerialServer serial_server;

        /* Utilization and tracing component */
        component BenchUtiliz bench;
        /*
         * Connections
         */
        picotcp_ethernet_async_connections(eth0, picoserver, ethdriver)
        picotcp_socket_sync_client_connections(echo, echo, picoserver, pico)
        picotcp_base_connections(picoserver, pico_base, time_server.the_timer)

        connection seL4TimeServer serialserver_timer(from serial_server.timeout, to time_server.the_timer);
        SerialServer_processed_putchar_printf_connection(putchar, echo, serial_server)
        SerialServer_processed_putchar_printf_connection(putchar, picoserver, serial_server)
        SerialServer_processed_putchar_printf_connection(putchar, ethdriver, serial_server)

        BenchUtiliz_trace_connections(trace, ethdriver, bench)
        BenchUtiliz_trace_connections(trace, picoserver, bench)
        BenchUtiliz_trace_connections(trace, echo, bench)
        BenchUtiliz_control_connections(idle, echo, bench)


    }

    configuration {
        echo._priority = 100;
        picoserver._priority = 99;
        ethdriver._priority = 98;

        picotcp_ethernet_async_configurations(eth0, picoserver, ethdriver)
        picotcp_socket_sync_client_configurations(echo, echo, 0x1000, PICOTCP_SOCKET_ASYNC_QUEUE_LEN, PICOTCP_SOCKET_ASYNC_POOL_SIZE)
        /*
         * Non-platform specific configurations
         */

        time_server.timers_per_client = 8;

        /* Tracing configuration */
        BenchUtiliz_trace_configurations(trace, ethdriver, 103)
        BenchUtiliz_trace_configurations(trace, picoserver, 102)
        BenchUtiliz_trace_configurations(trace, echo, 101)
        /* Set to 1 for enabling tracing */
        echo.enable_tracing = 1;
        picoserver.enable_tracing = 1;
        ethdriver.enable_tracing = 1;


        /*
         * PicoServer config
         */
        /* IP address to assign to the networking device */
        picotcp_base_configuration(picoserver, pico_base, "", "0.0.0.0")
        picoserver.heap_size = PICOSERVER_HEAP_SIZE;

    }
}
