--
-- Copyright 2019, Data61, CSIRO (ABN 41 687 119 230)
--
-- SPDX-License-Identifier: GPL-2.0-only
--
include <gum/common/common.cogent>


const_UART_REF_CLK : U32
const_UART_REF_CLK = 50000000


-- UART flags
flag_UART_SR1_RRDY : U32
flag_UART_SR1_RRDY = 1 << 9

flag_UART_SR1_TRDY : U32
flag_UART_SR1_TRDY = 1 << 13

-- CR1
flag_UART_CR1_UARTEN : U32
flag_UART_CR1_UARTEN = 1 << 0

flag_UART_CR1_RRDYEN : U32
flag_UART_CR1_RRDYEN = 1 << 9

-- CR2
flag_UART_CR2_SRST : U32
flag_UART_CR2_SRST = 1 << 0

flag_UART_CR2_RXEN : U32
flag_UART_CR2_RXEN = 1 << 1

flag_UART_CR2_TXEN : U32
flag_UART_CR2_TXEN = 1 << 2

flag_UART_CR2_ATEN : U32
flag_UART_CR2_ATEN = 1 << 3

flag_UART_CR2_RTSEN : U32
flag_UART_CR2_RTSEN = 1 << 4

flag_UART_CR2_WS : U32
flag_UART_CR2_WS = 1 << 5

flag_UART_CR2_STPB : U32
flag_UART_CR2_STPB = 1 << 6

flag_UART_CR2_PROE : U32
flag_UART_CR2_PROE = 1 << 7

flag_UART_CR2_PREN : U32
flag_UART_CR2_PREN = 1 << 8

flag_UART_CR2_RTEC : U32
flag_UART_CR2_RTEC = 1 << 9

flag_UART_CR2_ESCEN : U32
flag_UART_CR2_ESCEN = 1 << 11

flag_UART_CR2_CTS : U32
flag_UART_CR2_CTS = 1 << 12

flag_UART_CR2_CTSC : U32
flag_UART_CR2_CTSC = 1 << 13

flag_UART_CR2_IRTS : U32
flag_UART_CR2_IRTS = 1 << 14

flag_UART_CR2_ESCI : U32
flag_UART_CR2_ESCI = 1 << 15

-- CR3
flag_UART_CR3_RXDMUXDEL : U32
flag_UART_CR3_RXDMUXDEL = 1 << 2

-- FCR
uart_FCR_RFDIV : U32 -> U32
uart_FCR_RFDIV x = x * (1 << 7)

uart_FCR_RFDIV_MASK : () -> U32
uart_FCR_RFDIV_MASK () = uart_FCR_RFDIV 0x7

uart_FCR_RXTL : U32 -> U32
uart_FCR_RXTL x = x * (1 << 0)

uart_FCR_RXTL_MASK : () -> U32
uart_FCR_RXTL_MASK () = uart_FCR_RXTL 0x1F

-- SR2
flag_UART_SR2_RXFIFO_RDR : U32
flag_UART_SR2_RXFIFO_RDR = 1 << 0

flag_UART_SR2_TXFIFO_EMPTY : U32
flag_UART_SR2_TXFIFO_EMPTY = 1 << 14

-- RXD
flag_UART_URXD_READY_MASK : U32
flag_UART_URXD_READY_MASK = 1 << 15

flag_UART_BYTE_MASK : U32
flag_UART_BYTE_MASK = 0xFF

type IMXUartRegs = #{
    rxd   : U32  -- 0x000 Receiver Register
  , txd   : U32  -- 0x040 Transmitter Register
  , cr1   : U32  -- 0x080 Control Register 1
  , cr2   : U32  -- 0x084 Control Register 2
  , cr3   : U32  -- 0x088 Control Register 3
  , cr4   : U32  -- 0x08C Control Register 4
  , fcr   : U32  -- 0x090 FIFO Control Register
  , sr1   : U32  -- 0x094 Status Register 1
  , sr2   : U32  -- 0x098 Status Register 2
  , esc   : U32  -- 0x09C Escape Character Register
  , tim   : U32  -- 0x0A0 Escape Timer Register
  , bir   : U32  -- 0x0A4 BRM Incremental Register
  , bmr   : U32  -- 0x0A8 BRM Modulator Register
  , brc   : U32  -- 0x0AC Baud Rate Counter Register
  , onems : U32  -- 0x0B0 One Millisecond Register
  , ts    : U32  -- 0x0B4 Test Register
}

imx_uart_set_baud_cg : (#IMXUartRegs, U64) -> #IMXUartRegs
imx_uart_set_baud_cg (regs, bps) =
   let regs { fcr, bir, bmr } = regs
   and fcr = fcr .&. complement (uart_FCR_RFDIV_MASK ())
   and fcr = fcr .|. uart_FCR_RFDIV 4
   and bir = 0xF
   and bmr = const_UART_REF_CLK / (u64_to_u32 bps - 1)
   and regs = regs { fcr, bir, bmr }
   in regs

type Parity = < PARITY_NONE | PARITY_EVEN  | PARITY_ODD >

compute_cr2_by_parity : (Parity, U32) -> U32
compute_cr2_by_parity (p, cr2) = p
   | PARITY_NONE  -> let cr2 = cr2 .&. complement flag_UART_CR2_PREN
                     in cr2
   | PARITY_ODD   -> let cr2 = cr2 .|. flag_UART_CR2_PREN
                     and cr2 = cr2 .|. flag_UART_CR2_PROE
                     in cr2
   | PARITY_EVEN  -> let cr2 = cr2 .|. flag_UART_CR2_PREN
                     and cr2 = cr2 .&. complement flag_UART_CR2_PROE
                     in cr2

serial_configure_cg : (#IMXUartRegs, U64, U32, Parity, U32 ) -> #IMXUartRegs
serial_configure_cg (regs, bps, char_size, parity, stop_bits) =
   let regs { cr2 } = regs
   and cr2 =
     -- character size
     if | char_size == 8 -> cr2 .|. flag_UART_CR2_WS
        | char_size == 7 -> cr2 .&. complement flag_UART_CR2_WS
        | else           -> 0 -- Need to fail here
   and cr2 =
     -- stop bits
     if | stop_bits == 2 -> cr2 .|. flag_UART_CR2_STPB
        | stop_bits == 1 -> cr2 .&. complement flag_UART_CR2_STPB
        | else           -> 0 -- Need to fail here
   and cr2 = compute_cr2_by_parity (parity, cr2)
   and regs = regs { cr2 }
   and regs = imx_uart_set_baud_cg (regs, bps)
   in regs

uart_sw_reset_cg : #IMXUartRegs -> #IMXUartRegs
uart_sw_reset_cg regs =
   let regs { cr2 } = regs
   and cr2 = cr2 .&. complement flag_UART_CR2_SRST
   and regs = regs { cr2 }
   in regs

uart_init_cg : #IMXUartRegs -> #IMXUartRegs
uart_init_cg regs =
   let regs = uart_sw_reset_cg regs
   and regs = serial_configure_cg (regs, 115200, 8, PARITY_NONE, 1)
   -- enable the UART
   and regs { cr1, cr2, cr3, fcr } = regs
   and cr1 = cr1 .|. flag_UART_CR1_UARTEN
   and cr2 = cr2 .|. flag_UART_CR2_RXEN .|. flag_UART_CR2_TXEN
   and cr2 = cr2 .|. flag_UART_CR2_IRTS
   and cr3 = cr3 .|. flag_UART_CR3_RXDMUXDEL
   -- initialise the receiver interrupt
   and cr1 = cr1 .&. complement flag_UART_CR1_RRDYEN
   and fcr = fcr .&. complement (uart_FCR_RXTL_MASK ())
   and fcr = fcr .|. uart_FCR_RXTL 1
   and cr1 = cr1 .|. flag_UART_CR1_RRDYEN
   and regs = regs { cr1, cr2, cr3, fcr }
   in regs