/*
 * Copyright 2019, Data61, CSIRO (ABN 41 687 119 230)
 *
 * SPDX-License-Identifier: BSD-2-Clause
 */

$esc:(#include <stdint.h>)
$esc:(#include <stdlib.h>)
$esc:(#include <string.h>)
$esc:(#include <camkes/io.h>)
$esc:(#include <sel4/sel4.h>)


/* Cogent types */
typedef void *SysState;

#include "generated.c"

#define UART_SR1_RRDY          BIT( 9)
#define UART_SR1_TRDY          BIT(13)
/* CR1 */
#define UART_CR1_UARTEN        BIT( 0)
#define UART_CR1_RRDYEN        BIT( 9)
/* CR2 */
#define UART_CR2_SRST          BIT( 0)
#define UART_CR2_RXEN          BIT( 1)
#define UART_CR2_TXEN          BIT( 2)
#define UART_CR2_ATEN          BIT( 3)
#define UART_CR2_RTSEN         BIT( 4)
#define UART_CR2_WS            BIT( 5)
#define UART_CR2_STPB          BIT( 6)
#define UART_CR2_PROE          BIT( 7)
#define UART_CR2_PREN          BIT( 8)
#define UART_CR2_RTEC          BIT( 9)
#define UART_CR2_ESCEN         BIT(11)
#define UART_CR2_CTS           BIT(12)
#define UART_CR2_CTSC          BIT(13)
#define UART_CR2_IRTS          BIT(14)
#define UART_CR2_ESCI          BIT(15)
/* CR3 */
#define UART_CR3_RXDMUXDEL     BIT( 2)
/* FCR */
#define UART_FCR_RFDIV(x)      ((x) * BIT(7))
#define UART_FCR_RFDIV_MASK    UART_FCR_RFDIV(0x7)
#define UART_FCR_RXTL(x)       ((x) * BIT(0))
#define UART_FCR_RXTL_MASK     UART_FCR_RXTL(0x1F)
/* SR2 */
#define UART_SR2_RXFIFO_RDR    BIT(0)
#define UART_SR2_TXFIFO_EMPTY  BIT(14)
/* RXD */
#define UART_URXD_READY_MASK   BIT(15)
#define UART_BYTE_MASK         0xFF
struct imx_uart_regs {
    uint32_t rxd;      /* 0x000 Receiver Register */
    uint32_t res0[15];
    uint32_t txd;      /* 0x040 Transmitter Register */
    uint32_t res1[15];
    uint32_t cr1;      /* 0x080 Control Register 1 */
    uint32_t cr2;      /* 0x084 Control Register 2 */
    uint32_t cr3;      /* 0x088 Control Register 3 */
    uint32_t cr4;      /* 0x08C Control Register 4 */
    uint32_t fcr;      /* 0x090 FIFO Control Register */
    uint32_t sr1;      /* 0x094 Status Register 1 */
    uint32_t sr2;      /* 0x098 Status Register 2 */
    uint32_t esc;      /* 0x09c Escape Character Register */
    uint32_t tim;      /* 0x0a0 Escape Timer Register */
    uint32_t bir;      /* 0x0a4 BRM Incremental Register */
    uint32_t bmr;      /* 0x0a8 BRM Modulator Register */
    uint32_t brc;      /* 0x0ac Baud Rate Counter Register */
    uint32_t onems;    /* 0x0b0 One Millisecond Register */
    uint32_t ts;       /* 0x0b4 Test Register */
};
typedef volatile struct imx_uart_regs imx_uart_regs_t;
static imx_uart_regs_t *uart_regs = NULL;

static imx_uart_regs_t *uart_regs_from_cg($ty:(#IMXUartRegs) cgregs)
{
        imx_uart_regs_t *regs = uart_regs;

        regs->rxd = cgregs.rxd;
        regs->txd = cgregs.txd;
        regs->cr1 = cgregs.cr1;
        regs->cr2 = cgregs.cr2;
        regs->cr3 = cgregs.cr3;
        regs->cr4 = cgregs.cr4;
        regs->fcr = cgregs.fcr;
        regs->sr1 = cgregs.sr1;
        regs->sr2 = cgregs.sr2;
        regs->esc = cgregs.esc;
        regs->tim = cgregs.tim;
        regs->bir = cgregs.bir;
        regs->bmr = cgregs.bmr;
        regs->brc = cgregs.brc;
        regs->onems = cgregs.onems;
        regs->ts = cgregs.ts;

        return regs;
}

static $ty:(#IMXUartRegs) uart_regs_to_cg(imx_uart_regs_t *regs)
{
        $ty:(#IMXUartRegs) cgregs;

        cgregs.rxd = regs->rxd;
        cgregs.txd = regs->txd;
        cgregs.cr1 = regs->cr1;
        cgregs.cr2 = regs->cr2;
        cgregs.cr3 = regs->cr3;
        cgregs.cr4 = regs->cr4;
        cgregs.fcr = regs->fcr;
        cgregs.sr1 = regs->sr1;
        cgregs.sr2 = regs->sr2;
        cgregs.esc = regs->esc;
        cgregs.tim = regs->tim;
        cgregs.bir = regs->bir;
        cgregs.bmr = regs->bmr;
        cgregs.brc = regs->brc;
        cgregs.onems = regs->onems;
        cgregs.ts = regs->ts;

        return cgregs;
}

void irq_handle(void)
{
        /* TODO */
}

char uart_get_char()
{
    imx_uart_regs_t* regs = uart_regs;
    uint32_t reg = 0;
    int c = -1;

    if (regs->sr2 & UART_SR2_RXFIFO_RDR) {
        reg = regs->rxd;
        if (reg & UART_URXD_READY_MASK) {
            c = reg & UART_BYTE_MASK;
        }
    }

    return c;
}

void uart_put_char(char c)
{
    if (c == '\n') {
        uart_put_char('\r');
    }
    /* Block until space in FIFO */
    while (!(uart_regs->sr2 & UART_SR2_TXFIFO_EMPTY)) {}

    uart_regs->txd = c;

}


int uart__init(void)
{
        ps_io_ops_t ops;
        $ty:(#IMXUartRegs) regscg;
        int error = camkes_io_ops(&ops);
        ZF_LOGF_IF(error, "Failed to get malloc ops");

        /* Attempt to map the virtual address, assure this works */
        uart_regs = ps_io_map(&ops.io_mapper, 0x021E8000, 0x1000, false, PS_MEM_NORMAL);
        if (uart_regs == NULL) {
                return -1;
        }

        regscg = uart_regs_to_cg(uart_regs);

        regscg = uart_init_cg(regscg);

        uart_regs = uart_regs_from_cg(regscg);
        /* Software reset */
        while (!(uart_regs->cr2 & UART_CR2_SRST));

        return 0;
}

static inline u32 u64_to_u32(u64 x)
{
    return (u32) x;
}
