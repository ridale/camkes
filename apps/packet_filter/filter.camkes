/*
 * Copyright 2019, Penten
 *
 * This software may be distributed and modified according to the terms of
 * the BSD 2-Clause license. Note that NO WARRANTY is provided.
 * See "LICENSE_BSD2.txt" for details.
 *
 */

import <std_connector.camkes>;
import <TimeServer/TimeServer.camkes>;
import <Ethdriver/Ethdriver.camkes>;
import <Usbdriver/Usbdriver.camkes>;
import <global-connectors.camkes>;

import "components/Epit/Epit.camkes";
import "components/Eth/Eth.camkes";
import "components/Filter/Filter.camkes";
import "components/UsbEth/UsbEth.camkes";

assembly {
    composition {
        /* Ethdriver component */
        component EthdriverARMPlat ethdriver;
        component UsbdriverARMPlat usbdriver;

        component TimeServer time_server;
        component Epit epit;
        component Eth eth;          // plain text interface
        component UsbEth usbeth;    // cypher text interface
        component Filter filter;

        /** ETH **/
        /* Driver to Eth */
        connection seL4Ethdriver eth_driver_conn(from eth.ethdriver, to ethdriver.client);
        connection seL4SharedData s_ethhi(from eth.indatahi, to filter.indatahi);
        connection seL4RPCCall p_ethhi(from eth.inboundhi, to filter.inboundhi);
        connection seL4SharedData s_filhi(from filter.outdatahi, to eth.outdatahi);
        connection seL4RPCCall p_filhi(from filter.outboundhi, to eth.outboundhi);
        /** UsbEth **/

        connection seL4SharedData s_ethlo(from usbeth.indatalo, to filter.indatalo);
        connection seL4RPCCall p_ethlo(from usbeth.inboundlo, to filter.inboundlo);
        connection seL4SharedData s_fillo(from filter.outdatalo, to usbeth.outdatalo);
        connection seL4RPCCall p_fillo(from filter.outboundlo, to usbeth.outboundlo);

        /** EPIT **/
        connection seL4TimeServer epit_timer(from epit.timeout,
                                    to   time_server.the_timer);

        connection seL4Notification epit_100ms(from epit.tick100ms, to eth.tick100ms, to usbeth.tick100ms );

    }

    configuration {
        eth.indata_access  = "RW";
        filter.indata_access  = "RW";
        filter.outdata_access = "RW";
        eth.outdata_access = "RW";
        filter.sem_value = 0;
        eth.sem_value = 0;

        /* Ethernet driver configuration */
        ethdriver.simple = true;
        ethdriver.cnode_size_bits = 12;
        ethdriver.simple_untyped20_pool = 2;
        ethdriver.heap_size = 0x10000;
        ethdriver.dma_pool = 0x200000;

        epit.timeout_attributes = 2;
        time_server.timers_per_client = 8;

        eth.ethdriver_attributes = "1";
        eth.ethdriver_shmem_size = 0x1000;
        /* This control global endpoint is bound towards the Ethdriver component */
        eth.ethdriver_global_endpoint = "filter_endpoint";
        /* This should match the MAC address of the ethernet device */
        eth.ethdriver_mac = [0x00, 0x19, 0xb8, 0x00, 0xf0, 0x72];
        eth.heap_size = 0x40000;
        /* Ethernet driver configuration */
        ethdriver.promiscuous_mode = 0;
        // Inherits the MAC address of the filter component
        ethdriver.mac <- eth.ethdriver_mac;

    }
}

