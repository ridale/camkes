/*
 * Copyright 2018, Data61
 * Commonwealth Scientific and Industrial Research Organisation (CSIRO)
 * ABN 41 687 119 230.
 *
 * This software may be distributed and modified according to the terms of
 * the BSD 2-Clause license. Note that NO WARRANTY is provided.
 * See "LICENSE_BSD2.txt" for details.
 *
 * @TAG(DATA61_BSD)
 */

import <std_connector.camkes>;
import <SerialServer/SerialServer.camkes>;
import <TimeServer/TimeServer.camkes>;
import <VirtQueue/VirtQueue.camkes>;
import <global-connectors.camkes>;

component Client {
    control;
    uses PutChar serial_putchar;
    uses GetChar serial_getchar;
    /* Virtqueue connection for read and write */
    uses VirtQueueDrv read;
    uses VirtQueueDrv write;
    emits Callback self_read;
    emits Callback self_write;
    consumes Callback serial_read_wait;
    consumes Callback serial_write_wait;
}

assembly {
    composition {
        component Client client;
        component SerialServer serial;
        component TimeServer time_server;
        component VirtQueueInit serial_vqinit0;
        component VirtQueueInit serial_vqinit1;

        connection seL4RPCCall serial_time_server(from time_server.putchar, to serial.processed_putchar);
        connection seL4RPCCall serial_client(from client.serial_putchar, to serial.processed_putchar);

        connection seL4SerialServer serial_input(from client.serial_getchar, to serial.getchar);
        connection seL4TimeServer serialserver_timer(from serial.timeout, to time_server.the_timer);

        connection seL4VirtQueues serial_virtq_conn0(to serial_vqinit0.init, from client.write, from serial.write);
        connection seL4VirtQueues serial_virtq_conn1(to serial_vqinit1.init, from client.read, from serial.read);
        connection seL4GlobalAsynchCallback client_global_read_callback(from client.self_read, to client.serial_read_wait);
        connection seL4GlobalAsynchCallback client_global_write_callback(from client.self_write, to client.serial_write_wait);
        //connection seL4GlobalAsynchCallback serial_global_callback(from serial.self, to serial.serial_wait);
        connection seL4GlobalAsynchCallback serial_read_global_callback(from serial.self_read, to serial.serial_read_wait);
        connection seL4GlobalAsynchCallback serial_write_global_callback(from serial.self_write, to serial.serial_write_wait);
    }

    configuration {
        client.serial_getchar_shmem_size = 0x1000;


        time_server.timers_per_client = 1;
        client.read_id = 0;
        client.read_attributes = "10";
        client.write_id = 1;
        client.write_attributes = "10";
        client.read_shmem_size = 32768;
        client.write_shmem_size = 32768;

        serial.read_id = 0;
        serial.read_attributes = "10";
        serial.write_id = 1;
        serial.write_attributes = "10";
 
        serial.read_shmem_size = 32768;
        serial.write_shmem_size = 32768;

        serial_vqinit0.init_topology = [{ "drv" : "client.write", "dev" : "serial.write" }];
        serial_vqinit1.init_topology = [{ "drv" : "client.read", "dev" : "serial.read"}];
    }
}
